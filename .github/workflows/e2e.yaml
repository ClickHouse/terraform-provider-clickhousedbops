name: Run E2E tests

on:
  workflow_dispatch: {}

defaults:
  run:
    shell: bash

jobs:
  list-clickhouse-versions:
    outputs:
      versions: ${{ steps.list.outputs.versions }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: ./.github/actions/find-clickhouse-releases
        id: list

  list-terraform-versions:
    outputs:
      versions: ${{ steps.list.outputs.versions }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: ./.github/actions/find-github-releases
        id: list
        with:
          repo: 'hashicorp/terraform'
          count: '3'
          min: '1.11.0'

  list-tofu-versions:
    outputs:
      versions: ${{ steps.list.outputs.versions }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: ./.github/actions/find-github-releases
        id: list
        with:
          repo: 'opentofu/opentofu'
          count: '3'

  prepare-matrix:
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    runs-on: ubuntu-latest
    needs: ['list-clickhouse-versions', 'list-terraform-versions', 'list-tofu-versions']
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - id: matrix
        uses: ./.github/actions/prepare-matrix
        with:
          terraform_versions_json: ${{ needs.list-terraform-versions.outputs.versions }}
          tofu_versions_json: ${{ needs.list-tofu-versions.outputs.versions }}
          clickhouse_versions_json: ${{ needs.list-clickhouse-versions.outputs.versions }}

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Create tmp dir
        run: |
          TMPDIR="$(mktemp -d)"
          echo "TMPDIR=$TMPDIR" >> $GITHUB_ENV

      - name: Build terraform provider
        run: |
          CGO_ENABLED=0 go build -o $TMPDIR/terraform-provider-clickhousedbops
          
      - uses: actions/upload-artifact@v4
        with:
          name: terraform-provider-clickhousedbops
          path: ${{ env.TMPDIR }}

  database:
    runs-on: ubuntu-latest
    needs: ['build', 'prepare-matrix']
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare-matrix.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: ${{ github.job }} test
        uses: ./.github/actions/test
        with:
          example: ${{ github.job }}
          clickhouse_version: ${{ matrix.clickhouse_version }}
          terraform_image: ${{ matrix.terraform.image }}
          terraform_version: ${{ matrix.terraform.version }}
          terraform_binary: ${{ matrix.terraform.binary }}
          protocol: ${{ matrix.protocol }}
          cluster_name: ${{ matrix.cluster }}

  role:
    runs-on: ubuntu-latest
    needs: ['build', 'prepare-matrix']
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare-matrix.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: ${{ github.job }} test
        uses: ./.github/actions/test
        with:
          example: ${{ github.job }}
          clickhouse_version: ${{ matrix.clickhouse_version }}
          terraform_image: ${{ matrix.terraform.image }}
          terraform_version: ${{ matrix.terraform.version }}
          terraform_binary: ${{ matrix.terraform.binary }}
          protocol: ${{ matrix.protocol }}
          cluster_name: ${{ matrix.cluster }}

  user:
    runs-on: ubuntu-latest
    needs: ['build', 'prepare-matrix']
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare-matrix.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: ${{ github.job }} test
        uses: ./.github/actions/test
        with:
          example: ${{ github.job }}
          clickhouse_version: ${{ matrix.clickhouse_version }}
          terraform_image: ${{ matrix.terraform.image }}
          terraform_version: ${{ matrix.terraform.version }}
          terraform_binary: ${{ matrix.terraform.binary }}
          protocol: ${{ matrix.protocol }}
          cluster_name: ${{ matrix.cluster }}

  grantrole:
    runs-on: ubuntu-latest
    needs: ['build', 'prepare-matrix']
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare-matrix.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: ${{ github.job }} test
        uses: ./.github/actions/test
        with:
          example: ${{ github.job }}
          clickhouse_version: ${{ matrix.clickhouse_version }}
          terraform_image: ${{ matrix.terraform.image }}
          terraform_version: ${{ matrix.terraform.version }}
          terraform_binary: ${{ matrix.terraform.binary }}
          protocol: ${{ matrix.protocol }}
          cluster_name: ${{ matrix.cluster }}

  grantprivilege:
    runs-on: ubuntu-latest
    needs: ['build', 'prepare-matrix']
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare-matrix.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: ${{ github.job }} test
        uses: ./.github/actions/test
        with:
          example: ${{ github.job }}
          clickhouse_version: ${{ matrix.clickhouse_version }}
          terraform_image: ${{ matrix.terraform.image }}
          terraform_version: ${{ matrix.terraform.version }}
          terraform_binary: ${{ matrix.terraform.binary }}
          protocol: ${{ matrix.protocol }}
          cluster_name: ${{ matrix.cluster }}

  notify:
    name: "E2E tests"
    runs-on: ubuntu-latest
    needs: ['database', 'role', 'user', 'grantrole', 'grantprivilege']
    if: always()
    steps:
      - name: Successful run
        if: ${{ !(contains(needs.*.result, 'failure')) }}
        run: exit 0

      - name: Generate Token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.WORKFLOW_AUTH_PUBLIC_APP_ID }}
          private-key: ${{ secrets.WORKFLOW_AUTH_PUBLIC_PRIVATE_KEY }}

      - name: Send status check
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.token }}
        run: |
          state=""
          description=""
          if [ "${{ contains(needs.*.result, 'failure') }}" == "true" ]
          then
            state="error"
            description="E2E tests failed"
          else
            state="success"
            description="E2E tests succeeded"
          fi
          
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/statuses/${{ github.sha }} \
            -f "state=$state" \
            -f "target_url=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            -f "description=$description" \
            -f "context=E2E tests"
          
