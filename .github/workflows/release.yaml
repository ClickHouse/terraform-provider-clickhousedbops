name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        required: true
        description: "The semver formatted version for the new release i.e 0.3.1"

defaults:
  run:
    shell: bash

jobs:
  # Validate the input
  validate:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.check.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
      - name: Check input
        id: check
        run: |
          version="${{ inputs.version }}"
          version="${version#v}"
          
          # validate semver.
          if [[ $version =~ ^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(-((0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*))*))?(\+([0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*))?$ ]]; then
            echo "Valid release version: $version"
          
            if [[ $version =~ ^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)$ ]]; then
              # Release is something like x.y.z
              enable_alpha="false"
              goreleaser_config=".goreleaser-stable.yml"
            else
              # Release is something like x.y.z-something
              enable_alpha="true"
              goreleaser_config=".goreleaser-alpha.yml"
            fi
          else
            echo "Invalid semver: \"$version\". Must be something like 1.2.3"
            exit 1
          fi
          
          TAG="v${version}"
          
          # Check if release already exists
          response="$(curl -s -o /dev/null -w "%{http_code}" -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/ClickHouse/terraform-provider-clickhousedbops/releases/tags/${TAG})"
          if [ "$response" -eq 200 ]; then
            echo "Release $TAG already exists"
            exit 1
          else
            # check if tag already exists
            if git rev-parse "${TAG}" >/dev/null 2>&1; then
              echo "Tag $TAG already exists"
              exit 1
            else
              echo "version=${version}" >> $GITHUB_OUTPUT    
            fi
          fi

  list-examples:
    outputs:
      examples: ${{ steps.list.outputs.examples }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - id: list
        run: |
          examples="$(find examples/tests/ -name main.tf | xargs -n1 dirname | xargs -n1 basename| jq -cRn '[inputs]')"
          echo "examples=${examples}" >> "$GITHUB_OUTPUT"

  list-clickhouse-versions:
    outputs:
      versions: ${{ steps.list.outputs.versions }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: ./.github/actions/find-clickhouse-releases
        id: list

  list-terraform-versions:
    outputs:
      versions: ${{ steps.list.outputs.versions }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: ./.github/actions/find-github-releases
        id: list
        with:
          repo: 'hashicorp/terraform'
          count: '3'
          min: '1.11.0'

  list-tofu-versions:
    outputs:
      versions: ${{ steps.list.outputs.versions }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: ./.github/actions/find-github-releases
        id: list
        with:
          repo: 'opentofu/opentofu'
          count: '3'

  prepare-matrix:
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
    runs-on: ubuntu-latest
    needs: ['list-clickhouse-versions', 'list-terraform-versions', 'list-tofu-versions']
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - id: matrix
        uses: ./.github/actions/prepare-matrix
        with:
          terraform_versions_json: ${{ needs.list-terraform-versions.outputs.versions }}
          tofu_versions_json: ${{ needs.list-tofu-versions.outputs.versions }}
          clickhouse_versions_json: ${{ needs.list-clickhouse-versions.outputs.versions }}

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Create tmp dir
        run: |
          TMPDIR="$(mktemp -d)"
          echo "TMPDIR=$TMPDIR" >> $GITHUB_ENV

      - name: Build terraform provider
        run: |
          CGO_ENABLED=0 go build -o $TMPDIR/terraform-provider-clickhousedbops

      - uses: actions/upload-artifact@v4
        with:
          name: terraform-provider-clickhousedbops
          path: ${{ env.TMPDIR }}

  database:
    name: "Test ${{github.job}} resource"
    runs-on: ubuntu-latest
    needs: [ 'build', 'prepare-matrix' ]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare-matrix.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: ${{ github.job }} test
        uses: ./.github/actions/test
        with:
          example: ${{ github.job }}
          clickhouse_version: ${{ matrix.clickhouse_version }}
          terraform_image: ${{ matrix.terraform.image }}
          terraform_version: ${{ matrix.terraform.version }}
          terraform_binary: ${{ matrix.terraform.binary }}
          protocol: ${{ matrix.protocol }}
          cluster_name: ${{ matrix.cluster }}

  role:
    name: "Test ${{github.job}} resource"
    runs-on: ubuntu-latest
    needs: [ 'build', 'prepare-matrix' ]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare-matrix.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: ${{ github.job }} test
        uses: ./.github/actions/test
        with:
          example: ${{ github.job }}
          clickhouse_version: ${{ matrix.clickhouse_version }}
          terraform_image: ${{ matrix.terraform.image }}
          terraform_version: ${{ matrix.terraform.version }}
          terraform_binary: ${{ matrix.terraform.binary }}
          protocol: ${{ matrix.protocol }}
          cluster_name: ${{ matrix.cluster }}

  user:
    name: "Test ${{github.job}} resource"
    runs-on: ubuntu-latest
    needs: [ 'build', 'prepare-matrix' ]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare-matrix.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: ${{ github.job }} test
        uses: ./.github/actions/test
        with:
          example: ${{ github.job }}
          clickhouse_version: ${{ matrix.clickhouse_version }}
          terraform_image: ${{ matrix.terraform.image }}
          terraform_version: ${{ matrix.terraform.version }}
          terraform_binary: ${{ matrix.terraform.binary }}
          protocol: ${{ matrix.protocol }}
          cluster_name: ${{ matrix.cluster }}

  grantrole:
    name: "Test ${{github.job}} resource"
    runs-on: ubuntu-latest
    needs: [ 'build', 'prepare-matrix' ]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare-matrix.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: ${{ github.job }} test
        uses: ./.github/actions/test
        with:
          example: ${{ github.job }}
          clickhouse_version: ${{ matrix.clickhouse_version }}
          terraform_image: ${{ matrix.terraform.image }}
          terraform_version: ${{ matrix.terraform.version }}
          terraform_binary: ${{ matrix.terraform.binary }}
          protocol: ${{ matrix.protocol }}
          cluster_name: ${{ matrix.cluster }}

  grantprivilege:
    name: "Test ${{github.job}} resource"
    runs-on: ubuntu-latest
    needs: [ 'build', 'prepare-matrix' ]
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.prepare-matrix.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: ${{ github.job }} test
        uses: ./.github/actions/test
        with:
          example: ${{ github.job }}
          clickhouse_version: ${{ matrix.clickhouse_version }}
          terraform_image: ${{ matrix.terraform.image }}
          terraform_version: ${{ matrix.terraform.version }}
          terraform_binary: ${{ matrix.terraform.binary }}
          protocol: ${{ matrix.protocol }}
          cluster_name: ${{ matrix.cluster }}

  report:
    runs-on: ubuntu-latest
    needs: ['database', 'role', 'user', 'grantrole', 'grantprivilege']
    if: always()
    steps:
      - name: Successful run
        if: ${{ !(contains(needs.*.result, 'failure')) }}
        run: exit 0
      - name: Report error on github UI
        if: ${{ contains(needs.*.result, 'failure') }}
        run: |
          exit 1

  # Bump the provider version in the examples directory
  bump-examples:
    needs: [ 'validate', 'database', 'role', 'user', 'grantrole', 'grantprivilege']
    if: ${{ !(contains(needs.*.result, 'failure')) }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ssh-key: ${{secrets.DEPLOY_SSH_PRIVATE_KEY }}

      - name: Bump provider version in examples for stable version
        run: |
          version="${{ needs.validate.outputs.version }}"

          # Bump semver in examples
          export CLICKHOUSE_TERRAFORM_PROVIDER_VERSION="$version"
          for f in `find . -name provider.tf.template`
          do
            dst="${f%.template}"
            cat $f | envsubst > $dst

            sed -i '1s/^/# This file is generated automatically please do not edit\n/' $dst
          done
          
          make docs

      - name: Commit
        run: |
          if git diff --quiet --exit-code
          then
            echo "No changes detected"
          else
            git config --global user.name "Release Github Action"
            git config --global user.email "bot@users.noreply.github.com"
            git commit -a -m "Bump provider version in examples to ${{ needs.validate.outputs.version }}"
            git push
          fi

  # Create tag for the release
  tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    needs: [ "validate", 'database', 'role', 'user', 'grantrole', 'grantprivilege', "bump-examples" ]
    if: ${{ !(contains(needs.*.result, 'failure')) }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: "main"
    - name: Create tag
      run: |
        tag="v${{ needs.validate.outputs.version }}"
        git tag $tag
        git push origin $tag
        
  # Make a new release out of the tag
  goreleaser:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [ "validate", "tag", 'database', 'role', 'user', 'grantrole', 'grantprivilege' ]
    if: ${{ !(contains(needs.*.result, 'failure')) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: v${{ needs.validate.outputs.version }}
          # Allow goreleaser to access older tag information.
          fetch-depth: 0

      - name: Setup go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        id: import_gpg
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          args: release --clean
        env:
          # GitHub sets the GITHUB_TOKEN secret automatically.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
